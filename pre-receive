#!/bin/bash
##################################################################
# CONFIGURATION
# set uncrustify path or executable
# UNCRUSTIFY="/usr/bin/uncrustify"
UNCRUSTIFY="/Applications/UncrustifyX.app/Contents/Resources/uncrustify"

# set uncrustify config location
# CONFIG="/home/user/.config/uncrustify.cfg"
CONFIG="$HOME/.uncrustify/uncrustify.cfg"

# the source language: C, CPP, D, CS, JAVA, PAWN, VALA, OC, OC+
# use AUTO to let Uncrustify decide which language a given file uses.
# the detected language is printed to the console when Uncrustify is called.
# override if the automatic detection seems off.
# SOURCE_LANGUAGE="AUTO"
SOURCE_LANGUAGE="OC"

# remove any older patches from previous commits. Set to true or false.
# DELETE_OLD_PATCHES=false
DELETE_OLD_PATCHES=false

# only parse files with the extensions in FILE_EXTS. Set to true or false.
# if false every changed file in the commit will be parsed with Uncrustify.
# if true only files matching one of the extensions are parsed with Uncrustify.
# PARSE_EXTS=true
PARSE_EXTS=true

# file types to parse. Only effective when PARSE_EXTS is true.
# FILE_EXTS=".c .h .cpp .hpp"
FILE_EXTS=".c .h .cpp .hpp .m .mm"

# check whether the given file matches any of the set extensions
matches_extension() {
    local filename="$(basename -- "$1")"
    local extension=".${filename##*.}"
    local ext

    for ext in $FILE_EXTS; do [ "$ext" = "$extension" ] && return 0; done

    return 1
}
# make sure the config file and executable are correctly set
if [ ! -f "$CONFIG" ] ; then
    printf "Error: uncrustify config file not found.\n"
    printf "Set the correct path in $(canonicalize_filename "$0").\n"
    exit 1
fi

if ! command -v "$UNCRUSTIFY" > /dev/null ; then
    printf "Error: uncrustify executable not found.\n"
    printf "Set the correct path in $(canonicalize_filename "$0").\n"
    exit 1
fi

# create a filename to store our generated patch
prefix="pre-commit-uncrustify"
suffix="$(date +%C%y-%m-%d_%Hh%Mm%Ss)"
patch="/tmp/$prefix-$suffix.patch"

# clean up any older uncrustify patches
$DELETE_OLD_PATCHES && rm -f /tmp/$prefix*.patch

TEMPDIR=`mktemp -d`

echo "### Attempting to validate the uncrustify rules... ####"

# See https://www.kernel.org/pub/software/scm/git/docs/githooks.html#pre-receive    
oldrev=$1
newrev=$2
refname=$3

while read oldrev newrev refname; do
    
    # Get the file names, without directory, of the files that have been modified
    # between the new revision and the old revision
    files=`git diff --name-only ${oldrev} ${newrev}`

    # Get a list of all objects in the new revision
    objects=`git ls-tree --full-name -r ${newrev}`

    # Iterate over each of these files
    for file in ${files}; do
  
        # Search for the file name in the list of all objects
        object=`echo -e "${objects}" | egrep "(\s)${file}\$" | awk '{ print $3 }'`
        
        # If it's not present, then continue to the the next itteration
        if [ -z ${object} ]; 
    then 
        continue; 
    fi
    # ignore file if we do check for file extensions and the file
    # does not match any of the extensions specified in $FILE_EXTS
    if $PARSE_EXTS && ! matches_extension "$file"; then
        continue;
    fi

        # Otherwise, create all the necessary sub directories in the new temp directory
        mkdir -p "${TEMPDIR}/`dirname ${file}`" &>/dev/null
        # and output the object content into it's original file name
    git cat-file blob ${object} > ${TEMPDIR}/${file}

    # escape special characters in the source filename:
    # - '\': backslash needs to be escaped
    # - '*': used as matching string => '*' would mean expansion
    #        (curiously, '?' must not be escaped)
    # - '[': used as matching string => '[' would mean start of set
    # - '|': used as sed split char instead of '/', so it needs to be escaped
    #        in the filename
    # printf %s particularly important if the filename contains the % character
    file_escaped_source=$(printf "%s" "${TEMPDIR}/${file}" | sed -e 's/[\*[|]/\\&/g')

    # escape special characters in the target filename:
    # phase 1 (characters escaped in the output diff):
    #     - '\': backslash needs to be escaped in the output diff
    #     - '"': quote needs to be escaped in the output diff if present inside
    #            of the filename, as it used to bracket the entire filename part
    # phase 2 (characters escaped in the match replacement):
    #     - '\': backslash needs to be escaped again for sed itself
    #            (i.e. double escaping after phase 1)
    #     - '&': would expand to matched string
    #     - '|': used as sed split char instead of '/'
    # printf %s particularly important if the filename contains the % character
    file_escaped_target=$(printf "%s" "${TEMPDIR}/${file}" | sed -e 's/[\"]/\\&/g' -e 's/[\&|]/\\&/g')

    # Uncrustify detects the language automatically if it is not specified
    language_option=""
    if [ "$SOURCE_LANGUAGE" != "AUTO" ] ; then
        language_option="-l $SOURCE_LANGUAGE"
    fi

    # uncrustify our sourcefile, create a patch with diff and append it to our $patch
    # The sed call is necessary to transform the patch from
    #    --- $file timestamp
    #    +++ - timestamp
    # to both lines working on the same file and having a a/ and b/ prefix.
    # Else it can not be applied with 'git apply'.
    "$UNCRUSTIFY" -c "$CONFIG" -f "${TEMPDIR}/${file}" $language_option | \
        diff -u -- "${TEMPDIR}/${file}" - | \
        sed -e "1s|--- $file_escaped_source|--- \"a/$file_escaped_target\"|" -e "2s|+++ -|+++ \"b/$file_escaped_target\"|" >> "$patch"
    
    done;
done

rm -rf ${TEMPDIR} &> /dev/null

# if no patch has been generated all is ok, clean up the file stub and exit
if [ ! -s "$patch" ] ; then
    printf "Files in this commit comply with the uncrustify rules.\n"
    rm -f "$patch"
    exit 0
fi


# a patch has been created, notify the user and exit
printf "\nThe following differences were found between the code to push "
printf "and the uncrustify rules:\n\n"
cat "$patch"

printf "Aborting push. changes and push again"
rm -f "$patch"

exit 1
